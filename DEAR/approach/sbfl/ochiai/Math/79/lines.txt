/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,162,return minCluster;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,161,}
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,157,if (distance < minDistance) {
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,156,final double distance = point.distanceFrom(c.getCenter());
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,155,for (final Cluster<T> c : clusters) {
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,154,Cluster<T> minCluster = null;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,153,double minDistance = Double.MAX_VALUE;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,139,return resultSet;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,115,while (resultSet.size() < k) {
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,114,final double[] dx2 = new double[pointSet.size()];
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,112,resultSet.add(new Cluster<T>(firstPoint));
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,111,final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,108,final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,107,final List<T> pointSet = new ArrayList<T>(points);
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,91,cluster.addPoint(p);
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,90,Cluster<T> cluster = getNearestCluster(clusters, p);
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,89,for (final T p : points) {
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,57,assignPointsToClusters(clusters, points);
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,56,List<Cluster<T>> clusters = chooseInitialCenters(points, k, random);
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,42,}
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,41,this.random = random;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,40,public KMeansPlusPlusClusterer(final Random random) {
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java,71,return center;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java,48,}
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java,47,points = new ArrayList<T>();
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java,46,this.center = center;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java,45,public Cluster(final T center) {
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,57,return MathUtils.distance(point, p.getPoint());
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/util/MathUtils.java,1629,return Math.sqrt(sum);
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/util/MathUtils.java,1627,sum += dp * dp;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/util/MathUtils.java,1626,final int dp = p1[i] - p2[i];
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/util/MathUtils.java,1625,for (int i = 0; i < p1.length; i++) {
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/util/MathUtils.java,1624,int sum = 0;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,52,return point;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,45,}
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,44,this.point = point;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,43,public EuclideanIntegerPoint(final int[] point) {
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,159,minCluster = c;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,158,minDistance = distance;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,137,}
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,134,break;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,133,resultSet.add(new Cluster<T>(p));
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,132,final T p = pointSet.remove(i);
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,131,if (dx2[i] >= r) {
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,130,for (int i = 0 ; i < dx2.length; i++) {
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,129,final double r = random.nextDouble() * sum;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,124,dx2[i] = sum;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,123,sum += d * d;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,122,final double d = p.distanceFrom(nearest.getCenter());
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,121,final Cluster<T> nearest = getNearestCluster(resultSet, p);
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,120,final T p = pointSet.get(i);
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,119,for (int i = 0; i < pointSet.size(); i++) {
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,118,int sum = 0;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,93,}
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,92,}
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,77,return clusters;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,75,clusters = newClusters;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,74,assignPointsToClusters(newClusters, points);
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,72,return clusters;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,71,if (!clusteringChanged) {
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,70,}
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,69,newClusters.add(new Cluster<T>(newCenter));
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,67,clusteringChanged = true;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,66,if (!newCenter.equals(cluster.getCenter())) {
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,65,final T newCenter = cluster.getCenter().centroidOf(cluster.getPoints());
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,64,for (final Cluster<T> cluster : clusters) {
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,63,List<Cluster<T>> newClusters = new ArrayList<Cluster<T>>();
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,62,boolean clusteringChanged = false;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,61,for (int count = 0; count < max; count++) {
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,60,final int max = (maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,114,return buff.toString();
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,113,buff.append(")");
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,110,buff.append(",");
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,109,if (i < coordinates.length - 1) {
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,108,buff.append(coordinates[i]);
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,107,for (int i = 0; i < coordinates.length; i++) {
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,106,final int[] coordinates = getPoint();
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,105,final StringBuffer buff = new StringBuffer("(");
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,99,return hashCode;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,97,hashCode += i.hashCode() * 13 + 7;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,96,for (Integer i : point) {
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,95,int hashCode = 0;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,89,return true;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,86,return false;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,85,if (point[i] != otherPoint[i]) {
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,84,for (int i = 0; i < point.length; i++) {
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,82,return false;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,81,if (point.length != otherPoint.length) {
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,80,final int[] otherPoint = ((EuclideanIntegerPoint) other).getPoint();
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,78,return false;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,77,if (!(other instanceof EuclideanIntegerPoint)) {
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,71,return new EuclideanIntegerPoint(centroid);
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,69,centroid[i] /= points.size();
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,68,for (int i = 0; i < centroid.length; i++) {
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,67,}
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,65,centroid[i] += p.getPoint()[i];
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,64,for (int i = 0; i < centroid.length; i++) {
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,63,for (EuclideanIntegerPoint p : points) {
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java,62,int[] centroid = new int[getPoint().length];
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/79/src/main/java/org/apache/commons/math/stat/clustering/Cluster.java,63,return points;
