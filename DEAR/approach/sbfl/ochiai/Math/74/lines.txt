/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,311,interpolator.rescale(hNew);
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,310,hNew = filterStep(stepSize * factor, forward, false);
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,309,final double factor = computeStepGrowShrinkFactor(error);
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,292,filteredH = maxStep;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,359,return stopTime;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,358,stepSize  = Double.NaN;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,357,stepStart = Double.NaN;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,356,final double stopTime  = stepStart;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,299,} else {
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,297,interpolator.rescale(hNew);
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,296,hNew = dt;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,291,if (Math.abs(dt) <= Math.ulp(stepStart)) {
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,290,final double dt = manager.getEventTime() - stepStart;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,250,return new Array2DRowFieldMatrix<BigFraction>(pData, false);
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,246,aj *= factor;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,245,pI[j] = new BigFraction(aj * (j + 2));
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,244,for (int j = 0; j < pI.length; ++j) {
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,243,int aj = factor;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,242,final int factor = -(i + 1);
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,241,final BigFraction[] pI = pData[i];
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,239,for (int i = 0; i < pData.length; ++i) {
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,237,final BigFraction[][] pData = new BigFraction[nSteps][nSteps];
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,207,CACHE.put(nSteps, t);
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,206,t = new AdamsNordsieckTransformer(nSteps);
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,195,}
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,192,c1[i] = bigC1[i].doubleValue();
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,191,for (int i = 0; i < nSteps; ++i) {
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,190,c1             = new double[nSteps];
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,189,update         = MatrixUtils.bigFractionMatrixToRealMatrix(bigMSupdate);
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,188,initialization = MatrixUtils.bigFractionMatrixToRealMatrix(bigRInverse);
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,184,FieldMatrix<BigFraction> bigRInverse =
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,177,bigP.walkInOptimizedOrder(new DefaultFieldMatrixChangingVisitor<BigFraction>(BigFraction.ZERO) {
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,173,FieldMatrix<BigFraction> bigMSupdate =
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,172,Arrays.fill(shiftedP[0], BigFraction.ZERO);
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,171,shiftedP[0] = new BigFraction[nSteps];
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,169,shiftedP[i] = shiftedP[i - 1];
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,167,for (int i = shiftedP.length - 1; i > 0; --i) {
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,166,BigFraction[][] shiftedP = bigP.getData();
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,161,BigFraction[] bigC1 = pSolver.solve(u);
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,160,Arrays.fill(u, BigFraction.ONE);
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,159,BigFraction[] u = new BigFraction[nSteps];
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,156,FieldDecompositionSolver<BigFraction> pSolver =
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,155,FieldMatrix<BigFraction> bigP = buildP(nSteps);
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,152,private AdamsNordsieckTransformer(final int nSteps) {
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/fraction/BigFractionField.java,57,return BigFraction.ZERO;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/fraction/BigFractionField.java,52,return BigFraction.ONE;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/fraction/BigFractionField.java,47,return LazyHolder.INSTANCE;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/fraction/BigFractionField.java,41,}
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/fraction/BigFractionField.java,40,private BigFractionField() {
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/linear/MatrixUtils.java,710,return converter.getConvertedMatrix();
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/linear/MatrixUtils.java,709,m.walkInOptimizedOrder(converter);
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/linear/MatrixUtils.java,708,final BigFractionMatrixConverter converter = new BigFractionMatrixConverter();
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/fraction/BigFraction.java,1133,return BigFractionField.getInstance();
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/fraction/BigFraction.java,1105,return new BigFraction(num, den);
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/fraction/BigFraction.java,1103,den = denominator.multiply(fraction.denominator);
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/fraction/BigFraction.java,1102,num = (numerator.multiply(fraction.denominator)).subtract((fraction.numerator).multiply(denominator));
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/fraction/BigFraction.java,1100,den = denominator;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/fraction/BigFraction.java,1099,num = numerator.subtract(fraction.numerator);
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/fraction/BigFraction.java,1098,if (denominator.equals(fraction.denominator)) {
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/fraction/BigFraction.java,1097,BigInteger den = null;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/fraction/BigFraction.java,1096,BigInteger num = null;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/fraction/BigFraction.java,1093,return this;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/fraction/BigFraction.java,1092,if (ZERO.equals(fraction)) {
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/fraction/BigFraction.java,1029,return new BigFraction(numerator.divide(gcd), denominator.divide(gcd));
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/fraction/BigFraction.java,1028,final BigInteger gcd = numerator.gcd(denominator);
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/fraction/BigFraction.java,1016,return new BigFraction(denominator, numerator);
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/fraction/BigFraction.java,921,return new BigFraction(numerator.negate(), denominator);
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/fraction/BigFraction.java,909,return ret;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/fraction/BigFraction.java,906,ret = new BigFraction(numerator.multiply(fraction.numerator), denominator.multiply(fraction.denominator));
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/fraction/BigFraction.java,905,if (getNumeratorAsInt() != 0 && fraction.getNumeratorAsInt() != 0) {
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/fraction/BigFraction.java,903,BigFraction ret = ZERO;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/fraction/BigFraction.java,791,return numerator.intValue();
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/fraction/BigFraction.java,722,return ret;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/fraction/BigFraction.java,719,ret = thisOne.numerator.equals(rhs.numerator) && thisOne.denominator.equals(rhs.denominator);
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/fraction/BigFraction.java,718,BigFraction thisOne = this.reduce();
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/fraction/BigFraction.java,717,BigFraction rhs = ((BigFraction) other).reduce();
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/fraction/BigFraction.java,716,} else if (other instanceof BigFraction) {
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/fraction/BigFraction.java,715,ret = true;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/fraction/BigFraction.java,714,if (this == other) {
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/fraction/BigFraction.java,712,boolean ret = false;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/fraction/BigFraction.java,692,return numerator.doubleValue() / denominator.doubleValue();
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/fraction/BigFraction.java,678,return multiply(fraction.reciprocal());
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/fraction/BigFraction.java,674,if (BigInteger.ZERO.equals(fraction.numerator)) {
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/fraction/BigFraction.java,391,}
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/fraction/BigFraction.java,390,this(BigInteger.valueOf(num), BigInteger.valueOf(den));
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/fraction/BigFraction.java,376,}
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/fraction/BigFraction.java,375,this(BigInteger.valueOf(num), BigInteger.ONE);
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/fraction/BigFraction.java,157,}
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/fraction/BigFraction.java,154,denominator = den;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/fraction/BigFraction.java,153,numerator   = num;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/fraction/BigFraction.java,149,den = den.negate();
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/fraction/BigFraction.java,148,num = num.negate();
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/fraction/BigFraction.java,147,if (BigInteger.ZERO.compareTo(den) > 0) {
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/fraction/BigFraction.java,143,den = den.divide(gcd);
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/fraction/BigFraction.java,142,num = num.divide(gcd);
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/fraction/BigFraction.java,141,if (BigInteger.ONE.compareTo(gcd) < 0) {
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/fraction/BigFraction.java,140,final BigInteger gcd = num.gcd(den);
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/74/src/main/java/org/apache/commons/math/fraction/BigFraction.java,136,denominator = BigInteger.ONE;
