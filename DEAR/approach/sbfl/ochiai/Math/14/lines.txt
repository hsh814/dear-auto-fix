/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/14/src/main/java/org/apache/commons/math3/fitting/PolynomialFitter.java,68,return fit(new PolynomialFunction.Parametric(), guess);
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/14/src/main/java/org/apache/commons/math3/fitting/PolynomialFitter.java,38,}
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/14/src/main/java/org/apache/commons/math3/fitting/PolynomialFitter.java,37,super(optimizer);
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/14/src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunction.java,94,return evaluate(coefficients, x);
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/14/src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunction.java,80,}
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/14/src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunction.java,79,System.arraycopy(c, 0, this.coefficients, 0, n);
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/14/src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunction.java,78,this.coefficients = new double[n];
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/14/src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunction.java,75,while ((n > 1) && (c[n - 1] == 0)) {
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/14/src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunction.java,72,if (n == 0) {
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/14/src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunction.java,71,int n = c.length;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/14/src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunction.java,70,MathUtils.checkNotNull(c);
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/14/src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunction.java,69,super();
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/14/src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunction.java,139,return result;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/14/src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunction.java,136,for (int j = n - 2; j >= 0; j--) {
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/14/src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunction.java,135,double result = coefficients[n - 1];
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/14/src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunction.java,132,if (n == 0) {
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/14/src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunction.java,131,int n = coefficients.length;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/14/src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunction.java,130,MathUtils.checkNotNull(coefficients);
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/14/src/main/java/org/apache/commons/math3/fitting/CurveFitter.java,136,return fit(Integer.MAX_VALUE, f, initialGuess);
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/14/src/main/java/org/apache/commons/math3/linear/BlockRealMatrix.java,107,blocks = createBlocksLayout(rows, columns);
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/14/src/main/java/org/apache/commons/math3/linear/BlockRealMatrix.java,104,blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/14/src/main/java/org/apache/commons/math3/linear/BlockRealMatrix.java,103,blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/14/src/main/java/org/apache/commons/math3/linear/BlockRealMatrix.java,100,this.columns = columns;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/14/src/main/java/org/apache/commons/math3/linear/BlockRealMatrix.java,99,this.rows = rows;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/14/src/main/java/org/apache/commons/math3/linear/BlockRealMatrix.java,98,super(rows, columns);
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/14/src/main/java/org/apache/commons/math3/linear/BlockRealMatrix.java,272,++blockIndex;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/14/src/main/java/org/apache/commons/math3/linear/BlockRealMatrix.java,271,blocks[blockIndex] = new double[iHeight * jWidth];
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/14/src/main/java/org/apache/commons/math3/linear/BlockRealMatrix.java,270,final int jWidth = qEnd - qStart;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/14/src/main/java/org/apache/commons/math3/linear/BlockRealMatrix.java,269,final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/14/src/main/java/org/apache/commons/math3/linear/BlockRealMatrix.java,268,final int qStart = jBlock * BLOCK_SIZE;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/14/src/main/java/org/apache/commons/math3/linear/BlockRealMatrix.java,267,for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/14/src/main/java/org/apache/commons/math3/linear/BlockRealMatrix.java,266,final int iHeight = pEnd - pStart;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/14/src/main/java/org/apache/commons/math3/linear/BlockRealMatrix.java,265,final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/14/src/main/java/org/apache/commons/math3/linear/BlockRealMatrix.java,264,final int pStart = iBlock * BLOCK_SIZE;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/14/src/main/java/org/apache/commons/math3/linear/BlockRealMatrix.java,263,for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/14/src/main/java/org/apache/commons/math3/linear/BlockRealMatrix.java,262,int blockIndex = 0;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/14/src/main/java/org/apache/commons/math3/linear/BlockRealMatrix.java,261,final double[][] blocks = new double[blockRows * blockColumns][];
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/14/src/main/java/org/apache/commons/math3/linear/BlockRealMatrix.java,259,final int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/14/src/main/java/org/apache/commons/math3/linear/BlockRealMatrix.java,258,final int blockRows = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/14/src/main/java/org/apache/commons/math3/fitting/WeightedObservedPoint.java,57,return weight;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/14/src/main/java/org/apache/commons/math3/fitting/CurveFitter.java,172,final PointVectorValuePair optimum
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/14/src/main/java/org/apache/commons/math3/fitting/CurveFitter.java,169,final TheoreticalValuesFunction model = new TheoreticalValuesFunction(f);
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/14/src/main/java/org/apache/commons/math3/fitting/CurveFitter.java,166,}
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/14/src/main/java/org/apache/commons/math3/fitting/CurveFitter.java,165,++i;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/14/src/main/java/org/apache/commons/math3/fitting/CurveFitter.java,164,weights[i] = point.getWeight();
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/14/src/main/java/org/apache/commons/math3/fitting/CurveFitter.java,163,target[i]  = point.getY();
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/14/src/main/java/org/apache/commons/math3/fitting/CurveFitter.java,162,for (WeightedObservedPoint point : observations) {
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/14/src/main/java/org/apache/commons/math3/fitting/CurveFitter.java,161,int i = 0;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/14/src/main/java/org/apache/commons/math3/fitting/CurveFitter.java,160,double[] weights = new double[observations.size()];
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/14/src/main/java/org/apache/commons/math3/fitting/CurveFitter.java,159,double[] target  = new double[observations.size()];
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/14/src/main/java/org/apache/commons/math3/fitting/WeightedObservedPoint.java,75,return y;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/14/src/main/java/org/apache/commons/math3/fitting/CurveFitter.java,93,}
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/14/src/main/java/org/apache/commons/math3/fitting/CurveFitter.java,92,observations.add(new WeightedObservedPoint(weight, x, y));
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/14/src/main/java/org/apache/commons/math3/fitting/WeightedObservedPoint.java,49,}
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/14/src/main/java/org/apache/commons/math3/fitting/WeightedObservedPoint.java,48,this.y      = y;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/14/src/main/java/org/apache/commons/math3/fitting/WeightedObservedPoint.java,47,this.x      = x;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/14/src/main/java/org/apache/commons/math3/fitting/WeightedObservedPoint.java,46,this.weight = weight;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/14/src/main/java/org/apache/commons/math3/fitting/WeightedObservedPoint.java,45,public WeightedObservedPoint(final double weight, final double x, final double y) {
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/14/src/main/java/org/apache/commons/math3/fitting/CurveFitter.java,66,}
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/14/src/main/java/org/apache/commons/math3/fitting/CurveFitter.java,65,observations = new ArrayList<WeightedObservedPoint>();
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/14/src/main/java/org/apache/commons/math3/fitting/CurveFitter.java,64,this.optimizer = optimizer;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/14/src/main/java/org/apache/commons/math3/fitting/CurveFitter.java,63,public CurveFitter(final MultivariateVectorOptimizer optimizer) {
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/14/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java,157,}
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/14/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java,156,this(100, 1e-10, 1e-10, 1e-10, Precision.SAFE_MIN);
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/14/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java,274,}
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/14/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java,273,this.qrRankingThreshold = threshold;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/14/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java,272,this.orthoTolerance = orthoTolerance;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/14/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java,271,this.parRelativeTolerance = parRelativeTolerance;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/14/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java,270,this.costRelativeTolerance = costRelativeTolerance;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/14/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java,269,this.initialStepBoundFactor = initialStepBoundFactor;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/14/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java,268,super(null); // No custom convergence criterion.
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/14/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/ModelFunctionJacobian.java,37,}
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/14/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/ModelFunctionJacobian.java,36,jacobian = j;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/14/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/ModelFunctionJacobian.java,35,public ModelFunctionJacobian(MultivariateMatrixFunction j) {
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/14/src/main/java/org/apache/commons/math3/optim/MaxEval.java,41,}
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/14/src/main/java/org/apache/commons/math3/optim/MaxEval.java,40,maxEval = max;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/14/src/main/java/org/apache/commons/math3/optim/MaxEval.java,36,if (max <= 0) {
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/14/src/main/java/org/apache/commons/math3/optim/MaxEval.java,35,public MaxEval(int max) {
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/14/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java,43,weightMatrix = org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(dim, dim);
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/14/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java,42,final int dim = weight.length;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/14/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java,41,public Weight(double[] weight) {
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/14/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Target.java,40,}
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/14/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Target.java,39,target = observations.clone();
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/14/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Target.java,38,public Target(double[] observations) {
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/14/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/ModelFunction.java,37,}
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/14/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/ModelFunction.java,36,model = m;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/14/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/ModelFunction.java,35,public ModelFunction(MultivariateVectorFunction m) {
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/14/src/main/java/org/apache/commons/math3/linear/MatrixUtils.java,81,return (rows * columns <= 4096) ?
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/14/src/main/java/org/apache/commons/math3/util/MathUtils.java,267,}
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/14/src/main/java/org/apache/commons/math3/util/MathUtils.java,264,if (o == null) {
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/14/src/main/java/org/apache/commons/math3/util/FastMath.java,3421,return (a <= b) ? a : b;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/14/src/main/java/org/apache/commons/math3/linear/RealLinearOperator.java,53,public abstract class RealLinearOperator {
