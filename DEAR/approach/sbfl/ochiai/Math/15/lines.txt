/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/util/FastMath.java,1542,return pow(-x, y);
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/random/MersenneTwister.java,134,}
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/random/MersenneTwister.java,133,setSeed(seed);
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/random/MersenneTwister.java,132,mt = new int[N];
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/random/MersenneTwister.java,131,public MersenneTwister(long seed) {
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/random/MersenneTwister.java,217,}
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/random/MersenneTwister.java,216,setSeed(new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffl) });
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/random/MersenneTwister.java,207,}
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/random/MersenneTwister.java,205,clear(); // Clear normal deviate cache
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/random/MersenneTwister.java,203,mt[0] = 0x80000000; // MSB is 1; assuring non-zero initial array
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/random/MersenneTwister.java,199,i = 1;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/random/MersenneTwister.java,198,mt[0] = mt[N - 1];
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/random/MersenneTwister.java,197,if (i >= N) {
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/random/MersenneTwister.java,196,i++;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/random/MersenneTwister.java,195,mt[i]   = (int) (l & 0xffffffffL);
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/random/MersenneTwister.java,194,long l  = (l0 ^ ((l1 ^ (l1 >> 30)) * 1566083941l)) - i; // non linear
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/random/MersenneTwister.java,193,long l1 = (mt[i-1] & 0x7fffffffl) | ((mt[i-1] < 0) ? 0x80000000l : 0x0l);
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/random/MersenneTwister.java,192,long l0 = (mt[i] & 0x7fffffffl)   | ((mt[i]   < 0) ? 0x80000000l : 0x0l);
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/random/MersenneTwister.java,191,for (int k = N - 1; k != 0; k--) {
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/random/MersenneTwister.java,187,j = 0;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/random/MersenneTwister.java,186,if (j >= seed.length) {
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/random/MersenneTwister.java,184,i = 1;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/random/MersenneTwister.java,183,mt[0] = mt[N - 1];
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/random/MersenneTwister.java,182,if (i >= N) {
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/random/MersenneTwister.java,181,i++; j++;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/random/MersenneTwister.java,180,mt[i]   = (int) (l & 0xffffffffl);
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/random/MersenneTwister.java,179,long l  = (l0 ^ ((l1 ^ (l1 >> 30)) * 1664525l)) + seed[j] + j; // non linear
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/random/MersenneTwister.java,178,long l1 = (mt[i-1] & 0x7fffffffl) | ((mt[i-1] < 0) ? 0x80000000l : 0x0l);
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/random/MersenneTwister.java,177,long l0 = (mt[i] & 0x7fffffffl)   | ((mt[i]   < 0) ? 0x80000000l : 0x0l);
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/random/MersenneTwister.java,176,for (int k = FastMath.max(N, seed.length); k != 0; k--) {
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/random/MersenneTwister.java,174,int j = 0;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/random/MersenneTwister.java,173,int i = 1;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/random/MersenneTwister.java,172,setSeed(19650218);
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/random/MersenneTwister.java,167,if (seed == null) {
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/random/MersenneTwister.java,155,}
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/random/MersenneTwister.java,154,clear(); // Clear normal deviate cache
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/random/MersenneTwister.java,151,mt[mti]= (int) longMT;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/random/MersenneTwister.java,150,longMT = (1812433253l * (longMT ^ (longMT >> 30)) + mti) & 0xffffffffL;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/random/MersenneTwister.java,147,for (mti = 1; mti < N; ++mti) {
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/random/MersenneTwister.java,146,mt[0]= (int) longMT;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/random/MersenneTwister.java,144,long longMT = seed;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/util/FastMath.java,1541,if (y >= TWO_POWER_52 || y <= -TWO_POWER_52) {
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/dfp/DfpField.java,601,}
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/dfp/DfpField.java,578,if (sqr2String == null || sqr2String.length() < highPrecisionDecimalDigits - 3) {
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/dfp/DfpField.java,570,return result;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/dfp/DfpField.java,568,result[1] = new Dfp(this, new String(buf));
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/dfp/DfpField.java,564,buf[i] = '0';
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/dfp/DfpField.java,563,if (buf[i] >= '0' && buf[i] <= '9' && i < sp) {
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/dfp/DfpField.java,562,buf[i] = a.charAt(i);
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/dfp/DfpField.java,561,for (int i = 0; i < buf.length; i++) {
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/dfp/DfpField.java,559,result[0] = new Dfp(this, new String(buf, 0, sp));
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/dfp/DfpField.java,555,sig ++;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/dfp/DfpField.java,554,if (buf[i] >= '0' && buf[i] <= '9' && !leading) {
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/dfp/DfpField.java,551,break;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/dfp/DfpField.java,550,sp = i;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/dfp/DfpField.java,549,if (sig == (radixDigits / 2) * 4) {
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/dfp/DfpField.java,546,leading = false;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/dfp/DfpField.java,545,sig += (400 - sig) % 4;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/dfp/DfpField.java,544,if (buf[i] == '.') {
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/dfp/DfpField.java,541,leading = false;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/dfp/DfpField.java,540,if (buf[i] >= '1' && buf[i] <= '9') {
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/dfp/DfpField.java,538,buf[i] = a.charAt(i);
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/dfp/DfpField.java,537,for (int i = 0; i < buf.length; i++) {
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/dfp/DfpField.java,535,char[] buf = new char[a.length()];
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/dfp/DfpField.java,533,int sig = 0;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/dfp/DfpField.java,532,int sp = 0;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/dfp/DfpField.java,531,boolean leading = true;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/dfp/DfpField.java,530,Dfp result[] = new Dfp[2];
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/dfp/DfpField.java,332,}
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/dfp/DfpField.java,331,ieeeFlags |= bits & (FLAG_INVALID | FLAG_DIV_ZERO | FLAG_OVERFLOW | FLAG_UNDERFLOW | FLAG_INEXACT);
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/dfp/DfpField.java,269,return rMode;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/dfp/DfpField.java,251,return radixDigits;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/dfp/DfpField.java,245,}
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/dfp/DfpField.java,226,}
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/dfp/DfpField.java,224,ln10           = new Dfp(this, ln10String);
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/dfp/DfpField.java,223,ln5Split       = split(ln5String);
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/dfp/DfpField.java,222,ln5            = new Dfp(this, ln5String);
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/dfp/DfpField.java,221,ln2Split       = split(ln2String);
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/dfp/DfpField.java,220,ln2            = new Dfp(this, ln2String);
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/dfp/DfpField.java,219,eSplit         = split(eString);
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/dfp/DfpField.java,218,e              = new Dfp(this, eString);
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/dfp/DfpField.java,217,piSplit        = split(piString);
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/dfp/DfpField.java,216,pi             = new Dfp(this, piString);
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/dfp/DfpField.java,215,sqr3Reciprocal = new Dfp(this, sqr3ReciprocalString);
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/dfp/DfpField.java,214,sqr3           = new Dfp(this, sqr3String);
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/dfp/DfpField.java,213,sqr2Reciprocal = new Dfp(this, sqr2ReciprocalString);
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/dfp/DfpField.java,212,sqr2Split      = split(sqr2String);
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/dfp/DfpField.java,211,sqr2           = new Dfp(this, sqr2String);
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/dfp/DfpField.java,208,computeStringConstants((decimalDigits < 67) ? 200 : (3 * decimalDigits));
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/dfp/DfpField.java,202,synchronized (DfpField.class) {
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/dfp/DfpField.java,200,if (computeConstants) {
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/dfp/DfpField.java,198,this.two         = new Dfp(this, 2);
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/dfp/DfpField.java,197,this.one         = new Dfp(this, 1);
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/dfp/DfpField.java,196,this.zero        = new Dfp(this, 0);
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/dfp/DfpField.java,195,this.ieeeFlags   = 0;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/dfp/DfpField.java,194,this.rMode       = RoundingMode.ROUND_HALF_EVEN;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/dfp/DfpField.java,193,this.radixDigits = (decimalDigits < 13) ? 4 : (decimalDigits + 3) / 4;
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/dfp/DfpField.java,191,private DfpField(final int decimalDigits, final boolean computeConstants) {
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/dfp/DfpField.java,178,}
/root/dear-auto-fix/DEAR/approach/sbfl/defects4j_data/Math/15/src/main/java/org/apache/commons/math3/dfp/DfpField.java,177,this(decimalDigits, true);
